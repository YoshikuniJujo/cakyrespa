2012.09.30 Sun.

100 だけ進め、や 90 だけ回れは la'u li panono や la'u li 90 等で表せば良いかと思う。

2012.10.01 Mon.

ki'o だったか 000 を使えるようにする。
また gluturtle の方の問題だが、先に書いたものが上に書かれる問題を解決すること。

2012.10.02 Tue.

repeat できるようにする。
たとえば、lo nu ko bagi crakla gi carna cu rapli li vo といった感じか。
しかし、2個以上の接続にするとめんどくさいことになる。
bagi (bagi broda gi brode) gi brodi といった感じか。
あるいは、bagi broda gi (bagi brode gi brodi)

おりかえし表示が必要だ。

次は 画像を SVG file に記録する。

ko rejgau fi'o cmene zoi py. picture.svg .py.

といった感じ。
あるいは、再編集可能な形で保存したほうがいいのかもしれない。
とすると、

ko rejgau fi'o cmene zoi py. picture.ckr .py.

とかか。

その前に undo を実装したい。

線を消す。ko na pilno lo penbi でいいか。
亀を消す。na viska ko とした。

SE に対応したい。
けど、NA との関係でややめんどくさいかな?
そうでもないか。

保存は、la SVG として、と la cakyrespa として、との指定ができるようにする。
また la cakyrespa からの読み込みも実装する。

ko rejgau me'e zoi py. picture.svg .py. setai la syvygyd.
ko rejgau me'e zoi py. picture.ckr .py. setai la cakyrespa

ko tcidu fi la me zoi py. picture.ckr .py.

今の実装では setai でも tai でも同じに扱ってしまうのでそこを何とかしたい。

2012.10.03 Wed.

次は背景の色の変更。
それと、 .i を prompt とする。
また、vi 風の keybind で編集可能にする。

tu'a ko galfi lo foldi lo xekri 等

goto の実装
ko klama li jo'i renonoboi panono
といった感じか。

次は modal の SE をちゃんと区別するようにする。

次は負数を扱えるようにする。

2012.10.04 Thu.

関数を作れるようにする。
引数無しの関数ならば、lonu で作れる。
実行はたとえば ko gasnu が使えるだろう。

broda bu goi lonu ...
ko gasnu broda bu でいけるだろう。

引数有りの関数はどうしようか。
とりあえず、lonu ... ce'u ... とでもしておこうか。
これで引数ひとつの関係はできる。

複数の引数のある関係はたとえば、
lonu ... ce'u xi re ... ce'u xi pa といった感じか。

しかし引数の適用はどうするか。
xy. boi .ybu zo'u ... と zo'u を使うか。

とすると、定義が、
broda bu goi lonu ce'uxipa klama ce'uxire となり、使用は、
xy. boi .ybu zo'u ko gasnu broda bu となる。
定義のなかで、使用することは可能か。
zo'u が文全体に係ってしまうので難しい。でもできるかな。
brode bu goi bagi lonu ce'uxipa zo'u ko gasnu broda bu gi lonu ce'uxire zo'u
ko gasnu broda bu といった感じで可能かと思う。

たとえば、距離と角度を指定して、前進し左折する関数 broda bu を定義する。
ko morji broda bu goi lonu ko bagi crakla la'u ce'uxipa gi carna la'u ce'uxire
それを使用する。
lirenono livomu zo'u ko gasnu broda bu
それをx回くりかえす関数をつくる。
ko morji brode bu goi lonu lonu lirenono livomu zo'u ko gasnu broda bu rapli ce'uxipa
それをx回くりかえし fill する関数
ko morji brodi bu goi lonu bagi
	ko 
	lonu lirenono livomu zo'u ko gasnu broda bu rapli ce'uxipa gi

nu よりも du'u のほうがいいかもしれない。
ko morji broda bu goi lodu'u ko bagi crakla la'u ce'uxipa gi carna la'u ce'uxire
lirenono livomu zo'u ko gasnu broda bu
ko morji brode bu goi lodu'u lonu lirenono livomu zo'u ko gasnu broda bu rapli ce'uxipa
ko morji brodi bu goi lodu'u bagi
	ko co'a clugau gi bagi
	lonu lirenono livomu zo'u ko gasnu broda bu rapli ce'uxipa gi
	ko ce'u clugau
	

まずは引数無しの関数を作るところからはじめよう。
sumti のみの文は問題ないか。

代入には goi を使うべきか du を使うべきか。
本当ならば goi を使ったほうが良いのだろう。
しかし、それだと selbri を何にするかという問題がある。
co'e でもいいけど。

ko morji broda bu goi lodu'u ko bagi crakla gi carna
ko gasnu broda bu

をためしてみよう。

pcmd :: Lojban -> [Argument] -> Command
とする必要がある。
これは、ce'u が出てくるたびに、
xi pa がなければ順番に、
xi pa, xi re 等があればその順に [Argument] を参照するようにする。
まずは Read.hs の readSumti で CEhU Int を読み込めるようにしよう。
xi pa や xi re が無い場合にこれを、du'u 内での順番とすることができなくてはならない。
つまり、du'u 内における Lojban 内での Sumti に順番をつける必要がある。
まずは、CEhUPre としておいて、それをあとから processor にかけるのが良いかと思う。

次は、

ko morji broda bu goi lodu'u ko bagi crakla la'u ce'u gi carna
li cinono zo'u ko gasnu broda bu

を試してみようかな。

次に問題が生じそうなのは、
ko morji broda bu goi lodu'u ko bagi crakla la'u ce'u gi carna la'u ce'u
li cinono li vomu zo'u ko gasnu broda bu だ。

明示的に
ko morji broda bu goi lodu'u ko bagi crakla la'u ce'uxipa gi carna la'u ce'uxire
とすれば問題はないと思うが。

上のほうでもうまくいった。
bagi でつないでいてもひとつの文なのだからまあうまくいくか。

次は線の色についてやってみようと思う。

まずは、
ko pilno lo penbi poi me lo xunre
と言えるようにすることだ。
そしたら、

ko morji broda bu goi lodu'u ko pilno lo penbi poi me ce'u
lo xunre zo'u ko gasnu broda bu
とできる。

次は mapM_ に当たるやりかた。

ko morji broda bu goi lodu'u ko bagi pilno lo penbi poi me ce'u gi crakla
bagi loxunre gibagi lopelxu gi locrino zo'u ko gasnu broda bu

さらに無名関数的なものを作ろう。

bagi loxunre gibagi lopelxu gi locrino zo'u ko bagi pilno lo penbi poi me ce'u
 gi crakla

さて、そろそろ refactoring の時間だ。
まずは cakyrespa をあるてい度までやって、それから gluturtle に移ろう。
また、lojbanParser で UI をもうすこし構造的にしようかな。

2012.10.05 Fri.

command を [(String, Function)] から探すようにしようかな。

[Argument] ではなく [Sumti] を使うべきだったようだ。
今からでも直せるので直す。

2012.10.07 Sun.

ErrorC を使うのならば Maybe Command にする必要はないような気がする。
しかし、apply が Monad を要求している。
むしろ Either Error Command を使って ErrorC を使わないというやりかたもある。
いろいろ考えてみる必要がある。

Types.hs を作ろうかな。
cakyrespa を upload する前に gluturtle を upload する必要がある。

Language.Lojban.Read を top にもってきてしまおうかな。

Run の IORef を StateT IO に変えよう。

2012.10.09 Tue.

Run から unsafePerformIO を消したが、
そもそも Run は Field や Turtle の状態を変化させているということを考えると、
unsafePerformIO を使っても無害な気もしてきた。

そして main は確実にすっきりする。

ただ、run を複数にしようとしたときには問題が生じるな。
将来の拡張性を考えるとやはり unsafePerformIO は使わないほうがいいな。

Types の Commands と CommandList と Repeat は CommandList にまとめられるだろう。

Unknown や UnknownSelpli や ParseErrorC は ErrorC にまとめられるだろう。

data Command を lojban 名で統一したい。

2012.10.10 Wed.

tag -> tcita

とりあえず、文法事項は公式の文法の用語に従い、英語と lojban の混合とする。
